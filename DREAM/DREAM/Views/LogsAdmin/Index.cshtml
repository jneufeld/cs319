@model DREAM.Models.LogFilterModel
@using PagedList.Mvc;
@using PagedList;

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using (@Html.BeginForm())
{
    <table>
        <tr>
            <td>
                @Html.LabelFor(model => model.RequestID)
            </td>
            <td>
                @Html.EditorFor(model => model.RequestID)
                @Html.ValidationMessageFor(model => model.RequestID)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(model => model.Action)
            </td>
            <td>
                @Html.DropDownListFor(model => model.Action, (IEnumerable<SelectListItem>)ViewData["ActionList"])
                @Html.ValidationMessageFor(model => model.Action)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(model => model.UserName)
            </td>
            <td>
                @Html.EditorFor(model => model.UserName)
                @Html.ValidationMessageFor(model => model.UserName)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(model => model.Before)
            </td>
            <td>
                @Html.EditorFor(model => model.Before)
                @Html.ValidationMessageFor(model => model.Before)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(model => model.After)
            </td>
            <td>
                @Html.EditorFor(model => model.After)
                @Html.ValidationMessageFor(model => model.After)
            </td>
        </tr>
        <tr>
            <td>
                <p>
                    <input type="submit" name="button" value="Filter" />
                    <input type="submit" name="button" value="Clear" />
                </p>
            </td>
        </tr>
    </table>
    @Html.ValidationSummary()
}

@Html.PagedListPager(Model.PagedLogs, page => Url.Action("Index", new { request = Model.RequestID, 
                                                                        act = Model.Action, 
                                                                        user = Model.UserName,
                                                                        before = Model.Before, 
                                                                        after = Model.After,
                                                                        page = page }))

<table>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.UserName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.RequestID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Action)
        </th>
        <th>
            Time
        </th>
    </tr>

@foreach (var item in Model.PagedLogs) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.User.UserName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.RequestID)
        </td>
        @{
            int action = item.Action;
                
            if (action == 0)
            {
                <td>CREATE</td>
            }
            else if (action == 1)
            {
                <td>EDIT</td>
            }
            else if (action == 2)
            {
                <td>CLOSE</td>
            }
            else if (action == 3)
            {
                <td>VIEW</td>
            }
            else
            {
                <td></td>
            }
        }
        <td>
            @Html.DisplayFor(modelItem => item.TimePerformed)
        </td>
    </tr>
}

</table>

@if (Model.PagedLogs.Count == 0)
{
    <p>No results found!</p>
}