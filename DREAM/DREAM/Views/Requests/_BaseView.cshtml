@model DREAM.Models.RequestViewModel
@using DREAM.Models
@using DREAM.Helpers

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section featured
{
    @if (ViewBag.Alerts != null)
    {
        <div class="row">
            <ul style="list-style-type: none; margin-top: 10px">
                @foreach (var msg in (IList<MsgViewModel>)ViewBag.Alerts)
                {
                    Html.RenderPartial("MsgView", msg);
                }
            </ul>
        </div>
    }
}

<div class="row">
    <div class="span12">
        <h2>@ViewBag.Title</h2>

        @RenderSection("PreForm", false)
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

        <div class="row">
            <div class="span6">
                @if (Model.RequestID != 0)
                {
                    <div class="control-group">
                        @Html.LabelFor(model => model.RequestID)
                        <div class="controls">
                            @if(!ViewBag.ReadOnly)
                            {
                                @Html.HiddenFor(m => m.RequestID)
                            }
                            @Html.DisplayTextFor(model => model.RequestID)
                        </div>
                    </div>
                }

                <div class="control-group">
                    @Html.LabelFor(model => model.RequesterTypeStringID)
                    <div class="controls">
                        @Html.ControlDropDownFor((bool)ViewBag.ReadOnly, m => m.RequesterTypeString, m => m.RequesterTypeStringID,
                                                 (IEnumerable<SelectListItem>)ViewData["RequesterTypeList"], new { id = "req-type" })
                    </div>
                </div>

                @if (Model.RequestID != 0)
                {
                    <div class="control-group">
                        @Html.LabelFor(model => model.Status)
                        <div class="controls">
                            @Html.DisplayFor(m => m.Status)
                        </div>
                    </div>
                }
            </div>

            @if (Model.RequestID != 0)
            {
                <div class="span6">
                    <div class="control-group">
                        @Html.LabelFor(model => model.CreationTime)
                        <div class="controls">
                            @if (!ViewBag.ReadOnly)
                            {
                                @Html.HiddenFor(m => m.CreationTime)
                            }
                            @Html.DisplayTextFor(model => model.CreationTime)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(model => model.CreatedBy)
                        <div class="controls">
                            @if (!ViewBag.ReadOnly)
                            {
                                @Html.HiddenFor(m => m.CreatedBy)
                            }
                            @Html.DisplayTextFor(model => model.CreatedBy)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(model => model.CompletionTime)
                        <div class="controls">
                            @if (!ViewBag.ReadOnly)
                            {
                                @Html.HiddenFor(m => m.CompletionTime)
                            }
                            @Html.DisplayTextFor(model => model.CompletionTime)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(model => model.ClosedBy)
                        <div class="controls">
                            @if (!ViewBag.ReadOnly)
                            {
                                @Html.HiddenFor(m => m.ClosedBy)
                            }
                            @Html.DisplayTextFor(model => model.ClosedBy)
                        </div>
                    </div>
                </div>
            }
        </div>

        <hr />

        <div class="row">
            <div class="span6">
                <h4>Caller</h4>
                @if (Model.RequestID != 0)
                {
                    @Html.HiddenFor(m => m.CallerID)
                }

                <div class="control-group">
                    @Html.LabelFor(m => m.CallerFirstName)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.CallerFirstName, new { id = "caller-first" })
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.CallerLastName)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.CallerLastName, new { id = "caller-last" })
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.CallerEmail)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.CallerEmail)
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.CallerPhoneNumber)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.CallerPhoneNumber)
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.CallerRegionStringID)
                    <div class="controls">
                        @Html.ControlDropDownFor((bool)ViewBag.ReadOnly, m => m.CallerRegionString, m => m.CallerRegionStringID,
                                                 (IEnumerable<SelectListItem>)ViewData["RegionList"], new { @class = "span4" })
                    </div>
                </div>
            </div>

            <div class="span6">
                <h4>Patient</h4>
                @if (Model.RequestID != 0 && !ViewBag.ReadOnly)
                {
                    @Html.HiddenFor(m => m.PatientID)
                }

                <div class="control-group">
                    @Html.LabelFor(m => m.PatientFirstName)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.PatientFirstName, new { id = "patient-first" })
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.PatientLastName)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.PatientLastName, new { id = "patient-last" })
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.PatientAgencyID)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.PatientAgencyID)
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.PatientGender)
                    <div class="controls">
                        @Html.ControlDropDownFor((bool)ViewBag.ReadOnly, m => m.PatientGender, m => m.PatientGender,
                                                 (IEnumerable<SelectListItem>)ViewData["GenderList"])
                    </div>
                </div>

                <br />

                <div class="control-group">
                    @Html.LabelFor(m => m.PatientAge)
                    <div class="controls">
                        @Html.ControlFor((bool)ViewBag.ReadOnly, m => m.PatientAge)
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <h3>Questions</h3>

        if (Model.Questions == null || Model.Questions.Count == 0)
        {
            <p id="noQuestions">None.</p>
        }

        <ul id="questionList" style="list-style-type: none; margin-left: 0;">
            @if (Model.Questions != null)
            {
                foreach (QuestionViewModel qv in Model.Questions)
                {
                    Html.RenderPartial("QuestionEntry", qv);
                }
            }
        </ul>

        @Html.HiddenFor(m => m.QuestionCount)

        @Html.ValidationSummary(true)

        <div class="row form-actions">
            <div class="span12">
                @if(!ViewBag.ReadOnly)
                {
                    <a href="javascript:void(0);" onclick="viewModel.addNewQuestion();" class="btn btn-large btn-success">Add New Question</a>
                    <button name="Action" type="submit" value="Save" class="btn btn-large btn-primary">@RenderSection("SubmitButtonName")</button>
                    if(Model.RequestID != 0 && Model.Status != "Closed")
                    {
                        <button name="Action" type="submit" value="Close" class="btn btn-large btn-primary">Close Request</button>
                    }
                }
            </div>
        </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/jQuery.tmpl.min.js")
    @Styles.Render("~/Content/themes/base/css")
    @Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript"> if (!window.console) console = { log: function () { } }; </script>

    <script type="text/x-jquery-tmpl" id="questionTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, QuestionViewModel>("QuestionEntry", new QuestionViewModel { Index = "${QIndex}" }))
    </script>
    <script type="text/x-jquery-tmpl" id="keywordTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, KeywordViewModel>("KeywordEntry", new KeywordViewModel { }))
    </script>
    <script type="text/x-jquery-tmpl" id="referenceTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, ReferenceViewModel>("ReferenceEntry", new ReferenceViewModel { }))
    </script>

    @Scripts.Render("~/Scripts/requests.js")

    @RenderSection("ExtraScripts", false)
}
