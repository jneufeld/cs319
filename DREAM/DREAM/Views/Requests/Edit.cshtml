@model DREAM.Models.RequestViewModel
@using DREAM.Models
@using DREAM.Helpers

@{
    ViewBag.Title = "Edit Request";
}

<h2>Edit Request</h2>

@if (ViewBag.IsLocked)
{
    <div class="editor-label">
        This request is currently locked and cannot be edited.
    </div>
}

@if (!ViewBag.IsLocked)
{
    using (Html.BeginForm())
    {

    @Html.AntiForgeryToken()

    <fieldset>
        <legend>Request</legend>

        <a href="javascript:void(0);" onclick="viewModel.closeRequest();">Close Request</a>

        <table>
            <tr>
                <td>
                    @Html.LabelFor(model => model.RequestID)
                </td>
                <td>
                    @Html.HiddenFor(m => m.RequestID)
                    @Html.DisplayTextFor(model => model.RequestID)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.RequesterTypeStringID)
                </td>
                <td>
                    @Html.DropDownListFor(m => m.RequesterTypeStringID, (IEnumerable<SelectListItem>)ViewData["RequesterTypeList"])
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.Status)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Status, new { disabled = "disabled", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Close)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CreationTime)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CreationTime)
                    @Html.DisplayTextFor(model => model.CreationTime)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CreatedBy)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CreatedBy)
                    @Html.DisplayTextFor(model => model.CreatedBy)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CompletionTime)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CompletionTime)
                    @Html.DisplayTextFor(model => model.CompletionTime)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.ClosedBy)
                </td>
                <td>
                    @Html.HiddenFor(m => m.ClosedBy)
                    @Html.DisplayTextFor(model => model.ClosedBy)
                </td>
            </tr>
        </table>

        <h3>Caller Data</h3>

        <div style="border: solid; border-width: 1px; margin: 5px">
            <fieldset>
                <legend>Caller</legend>

                @Html.HiddenFor(m => m.CallerID)

                <table>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerFirstName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerFirstName)
                            @Html.ValidationMessageFor(m => m.CallerFirstName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerLastName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerLastName)
                            @Html.ValidationMessageFor(m => m.CallerLastName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerEmail)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerEmail)
                            @Html.ValidationMessageFor(m => m.CallerEmail)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerPhoneNumber)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerPhoneNumber)
                            @Html.ValidationMessageFor(m => m.CallerPhoneNumber)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerRegionStringID)
                        </td>
                        <td>
                            @Html.DropDownListFor(m => m.CallerRegionStringID, (IEnumerable<SelectListItem>)ViewData["RegionList"])
                            @Html.ValidationMessageFor(m => m.CallerRegionStringID)
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>

        <h3>Patient Data</h3>

        <div style="border: solid; border-width: 1px; margin: 5px">
            <fieldset>
                <legend>Patient</legend>

                @Html.HiddenFor(m => m.PatientID)

                <table>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientFirstName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientFirstName)
                            @Html.ValidationMessageFor(m => m.PatientFirstName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientLastName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientLastName)
                            @Html.ValidationMessageFor(m => m.PatientLastName)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientAgencyID)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientAgencyID)
                            @Html.ValidationMessageFor(m => m.PatientAgencyID)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientGender)
                        </td>
                        <td>
                            @Html.DropDownListFor(m => m.PatientGender, (IEnumerable<SelectListItem>)ViewData["GenderList"])
                            @Html.ValidationMessageFor(m => m.PatientGender)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientAge)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientAge)
                            @Html.ValidationMessageFor(m => m.PatientAge)
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>

        <h3>Questions</h3>
        
        @if (Model.Questions == null || Model.Questions.Count == 0)
        {
            <p>None.</p>
        }
        <div style="border: solid; border-width: 1px; margin: 5px">
            <ul id="questionList" style="list-style-type: none">
                @if (Model.Questions != null)
                {
                    foreach (QuestionViewModel qv in Model.Questions)
                    {
                        Html.RenderPartial("QuestionEntry", qv);
                    }
                }
            </ul>
            <a href="javascript:void(0);" onclick="viewModel.addNewQuestion();">Add new question</a>
        </div>
        @Html.HiddenFor(m => m.QuestionCount)

        @Html.ValidationSummary(true)

        <p>
            <input type="submit" value="Save" />
        </p>
        <p>
            @Html.ActionLink("Export", "Export", new { reqId = Model.RequestID })
        </p>
        <p>
            @Html.ActionLink("Audit Request (Unsaved changes will be lost)", "Index", "LogsAdmin", new { request = Model.RequestID }, "")
        </p>
    </fieldset>
    }
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jquerytmpl")
    @Styles.Render("~/Content/themes/base/css")

    <script type="text/x-jquery-tmpl" id="questionTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, QuestionViewModel>("QuestionEntry", new QuestionViewModel { Index = "${QIndex}"}))
    </script>
    <script type="text/x-jquery-tmpl" id="keywordTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, KeywordViewModel>("KeywordEntry", new KeywordViewModel { }))
    </script>
    <script type="text/x-jquery-tmpl" id="referenceTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, ReferenceViewModel>("ReferenceEntry", new ReferenceViewModel { }))
    </script>

    <script type="text/javascript">
        var viewModel = {
            addNewQuestion: function () {
                var count = $("input[name=QuestionCount]:hidden");
                var idx = count.val();
                var $obj = $("#questionTemplate").tmpl({ Questions_index: viewModel._generateGuid(), Keywords_index: viewModel._generateGuid(), References_index: viewModel._generateGuid(), QIndex: idx });
                viewModel.addImpactUpdateHandler($obj);
                $("#questionList").append($obj);
                var next = +idx + 1;
                count.val(next);
            },

            addNewKeyword: function ($keywordsList, prefix) {
                var $obj = $("#keywordTemplate").tmpl({ prefix: prefix, Keywords_index: viewModel._generateGuid() });
                viewModel.applyKeywordAutocomplete($obj.find(".keywordAutocomplete"));
                viewModel.addDeleteHandler($obj.find(".deleteKeyword"));
                $keywordsList.append($obj);
            },

            addNewReference: function ($referenceList, prefix) {
                var $obj = $("#referenceTemplate").tmpl({ prefix: prefix, References_index: viewModel._generateGuid() });
                viewModel.addDeleteHandler($obj.find(".deleteReference"));
                $referenceList.append($obj);
            },

            _generateGuid: function () {
                // Source: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            },

            applyKeywordAutocomplete: function (node) {
                $(node).autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: "/Autocomplete/Keyword", type: "POST", dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            data: "{ \"prefix\": \"" + request.term + "\" }",
                            async: true,
                            success: function (data) {
                                response(data);
                            },
                            error: function (result) {
                                response(null);
                            }
                        });
                    },
                    delay: 500,
                    minLength: 2,
                    select: function (event, ui) {
                        $(node).find("input[name$=Keyword]").val(ui.item.value);
                    },
                });
            },

            addDeleteHandler: function (node) {
                $(node).click(function () {
                    var par = $(this).closest("li");
                    var deleted = par.find("input[name$=Delete]:hidden");
                    console.log(par);
                    console.log(deleted);
                    deleted.val('True');
                    par.hide(0.5);
                });
            },

            computeImpact: function (severity, probability) {
                var probableLookup = { "Major": 1, "Moderate": 2, "Minor": 3 };
                var possibleLookup = { "Major": 4, "Moderate": 4, "Minor": 5 };
                var unlikelyLookup = { "Major": 5, "Moderate": 5, "Minor": 5 };
                var problookup = {};
                problookup["Probable"] = probableLookup;
                problookup["Possible"] = possibleLookup;
                problookup["Unlikely"] = unlikelyLookup;
                var l = problookup[probability];
                if (l) {
                    return l[severity];
                }
                else
                    return 0;
            },

            addImpactUpdateHandler: function (questionItem) {
                var handler = function (obj) {
                    var $prob = questionItem.find("select[name$=Probability]");
                    var $severity = questionItem.find("select[name$=Severity]");
                    var prob = $prob.val();
                    var severity = $severity.val();
                    var $impact = questionItem.find("input[name$=Impact]");
                    var impact = viewModel.computeImpact(severity, prob);
                    console.log(prob);
                    $impact.val(impact);
                }
                var $prob = questionItem.find("select[name$=Probability]");
                var $severity = questionItem.find("select[name$=Severity]");
                $prob.change(handler);
                $prob.trigger('change');
                $severity.change(handler);
            },

            closeRequest: function () {
                $("input[name=Close]:hidden").val('True');
                $("input[name=Status]").val('Closed');
            }

        };

        $("body").on("click", ".addNewKeyword", function () {
            var $keywordList = $(this).siblings(".keywordValues");
            var keywordIndex = $(this).siblings("input['hidden']").val();
            var prefix = "Questions[" + keywordIndex + "].";
            viewModel.addNewKeyword($keywordList, prefix);
            return false;
        });

        $("body").on("click", ".addNewReference", function () {
            var $referenceList = $(this).siblings(".referenceValues");
            var referenceIndex = $(this).siblings("input['hidden']").val();
            var prefix = "Questions[" + referenceIndex + "].";
            viewModel.addNewReference($referenceList, prefix);
            return false;
        });

        $(function () {
            $("#PatientAgencyID").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Autocomplete/Patient", type: "POST", dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: "{ \"agencyId\": \"" + request.term + "\" }",
                        async: true,
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (result) {
                            response(null);
                        }
                    });
                },
                delay: 500,
                minLength: 2,
                select: function (event, ui) {
                    $("input[name=PatientAgencyID]").val(ui.item.AgencyID);
                    $("input[name=PatientFirstName]").val(ui.item.FirstName);
                    $("input[name=PatientLastName]").val(ui.item.LastName);
                    $("input[name=PatientGender]").val(ui.item.Gender);
                    $("input[name=PatientAge]").val(ui.item.Age);
                },
            });

            $keywordInputs = $(".keywordAutocomplete");
            $.each($keywordInputs, function(i, val) {
                viewModel.applyKeywordAutocomplete(val);
            });

            $keywordDeleters = $(".deleteKeyword");
            $.each($keywordDeleters, function (i, val) {
                viewModel.addDeleteHandler(val);
            });

            $referenceDeleters = $(".deleteReference");
            $.each($referenceDeleters, function (i, val) {
                viewModel.addDeleteHandler(val);
            });

            $questionItems = $(".questionItem");
            $.each($questionItems, function (i, question) {
                var $question = $(question);
                viewModel.addImpactUpdateHandler($question);
                $question.find("input[name$=Probability]").change();
            });
        });
    </script>
}
