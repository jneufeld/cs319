@model DREAM.Models.RequestViewModel
@using DREAM.Models
@using DREAM.Helpers

@{
    ViewBag.Title = "Edit Request";
}

<h2>Edit Request</h2>

@if (ViewBag.IsLocked)
{
    <div class="editor-label">
        This request is currently locked and cannot be edited.
    </div>
}

@if (!ViewBag.IsLocked)
{
    using (Html.BeginForm())
    {

    @Html.AntiForgeryToken()

    <fieldset>
        <legend>Request</legend>

        <table>
            <tr>
                <td>
                    @Html.LabelFor(model => model.RequestID)
                </td>
                <td>
                    @Html.HiddenFor(m => m.RequestID)
                    @Html.DisplayTextFor(model => model.RequestID)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.RequesterTypeStringID)
                </td>
                <td>
                    @Html.DropDownListFor(m => m.RequesterTypeStringID, (IEnumerable<SelectListItem>)ViewData["RequesterTypeList"])
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CreationTime)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CreationTime)
                    @Html.DisplayTextFor(model => model.CreationTime)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CreatedBy)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CreatedBy)
                    @Html.DisplayTextFor(model => model.CreatedBy)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.CompletionTime)
                </td>
                <td>
                    @Html.HiddenFor(m => m.CompletionTime)
                    @Html.DisplayTextFor(model => model.CompletionTime)
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.ClosedBy)
                </td>
                <td>
                    @Html.HiddenFor(m => m.ClosedBy)
                    @Html.DisplayTextFor(model => model.ClosedBy)
                </td>
            </tr>
        </table>

        <h3>Caller Data</h3>

        <div style="border: solid; border-width: 1px; margin: 5px">
            <fieldset>
                <legend>Caller</legend>

                @Html.HiddenFor(m => m.CallerID)

                <table>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerFirstName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerFirstName)
                            @Html.ValidationMessageFor(m => m.CallerFirstName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerLastName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerLastName)
                            @Html.ValidationMessageFor(m => m.CallerLastName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerEmail)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerEmail)
                            @Html.ValidationMessageFor(m => m.CallerEmail)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerPhoneNumber)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.CallerPhoneNumber)
                            @Html.ValidationMessageFor(m => m.CallerPhoneNumber)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.CallerRegionStringID)
                        </td>
                        <td>
                            @Html.DropDownListFor(m => m.CallerRegionStringID, (IEnumerable<SelectListItem>)ViewData["RegionList"])
                            @Html.ValidationMessageFor(m => m.CallerRegionStringID)
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>

        <h3>Patient Data</h3>

        <div style="border: solid; border-width: 1px; margin: 5px">
            <fieldset>
                <legend>Patient</legend>

                @Html.HiddenFor(m => m.PatientID)

                <table>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientFirstName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientFirstName)
                            @Html.ValidationMessageFor(m => m.PatientFirstName)
                        </td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientLastName)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientLastName)
                            @Html.ValidationMessageFor(m => m.PatientLastName)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientAgencyID)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientAgencyID)
                            @Html.ValidationMessageFor(m => m.PatientAgencyID)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientGender)
                        </td>
                        <td>
                            @Html.DropDownListFor(m => m.PatientGender, (IEnumerable<SelectListItem>)ViewData["GenderList"])
                            @Html.ValidationMessageFor(m => m.PatientGender)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.PatientAge)
                        </td>
                        <td>
                            @Html.EditorFor(m => m.PatientAge)
                            @Html.ValidationMessageFor(m => m.PatientAge)
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>

        <h3>Questions</h3>

        <!--
        <div style="border: solid; border-width: 1px; margin: 5px">
            @*Html.EditorFor(m => m.Questions) *@
        </div>
        -->
        
        @if (Model.Questions == null || Model.Questions.Count == 0)
        {
            <p>None.</p>
        }
        <div style="border: solid; border-width: 1px; margin: 5px">
            <ul id="questionList" style="list-style-type: none">
                @if (Model.Questions != null)
                {
                    foreach (QuestionViewModel qv in Model.Questions)
                    {
                        Html.RenderPartial("QuestionEntry", qv);
                    }
                }
            </ul>
            <a href="javascript:void(0);" onclick="viewModel.addNewQuestion();">Add new question</a>
        </div>
        @Html.HiddenFor(m => m.QuestionCount)

        @*<script type="text/javascript">
            $(function () {
                $("#addQuestion").click(function () {
                    var count = $("input[name=QuestionCount]:hidden");
                    var idx = count.val();
                    var next = +idx + 1;
                    count.val(next);
                    $.get('/Requests/QuestionEntryItem/' + idx, function (template) {
                        $("#questionEditor").append(template);
                    });
                });
            });
        </script>*@

        @*<script>
           $(function () {
               $(".deleteQuestion").click(function () {
                   var par = $(this).parent();
                   var deleted = par.find("input[name$=Delete]:hidden");
                   console.log(par);
                   console.log(deleted);
                   deleted.val('True');
                   par.hide(0.5);
               });
           });
        </script>*@

        @Html.ValidationSummary(true)

        <p>
            <input type="submit" value="Save" />
        </p>
        <p>
            @Html.ActionLink("Export", "Export", new { reqId = Model.RequestID })
        </p>
        <p>
            @Html.ActionLink("Audit Request (Unsaved changes will be lost)", "Index", "LogsAdmin", new { request = Model.RequestID }, "")
        </p>
    </fieldset>
    }
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content("~/Scripts/jQuery.tmpl.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui-1.8.20.min.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/themes/base/minified/jquery-ui.min.css")" rel="stylesheet" type="text/css"></link>

    <script type="text/x-jquery-tmpl" id="questionTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, QuestionViewModel>("QuestionEntry", new QuestionViewModel { Index = "${QIndex}"}))
    </script>
    <script type="text/x-jquery-tmpl" id="keywordTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, KeywordViewModel>("KeywordEntry", new KeywordViewModel { }))
    </script>
    <script type="text/x-jquery-tmpl" id="referenceTemplate">
        @(Html.CollectionItemJQueryTemplate<RequestViewModel, ReferenceViewModel>("ReferenceEntry", new ReferenceViewModel { }))
    </script>

    <script type="text/javascript">
        var viewModel = {
            addNewQuestion: function () {
                var count = $("input[name=QuestionCount]:hidden");
                var idx = count.val();
                $("#questionList").append($("#questionTemplate").tmpl({ Questions_index: viewModel._generateGuid(), Keywords_index: viewModel._generateGuid(), References_index: viewModel._generateGuid(), QIndex: idx }));
                var next = +idx + 1;
                count.val(next);
            },

            addNewKeyword: function ($keywordsList, prefix) {
                $keywordsList.append($("#keywordTemplate").tmpl({ prefix: prefix, Keywords_index: viewModel._generateGuid() }));
            },

            addNewReference: function ($referenceList, prefix) {
                $referenceList.append($("#referenceTemplate").tmpl({ prefix: prefix, References_index: viewModel._generateGuid() }));
            },

            _generateGuid: function () {
                // Source: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }
        };

        $.datepicker.setDefaults({
            dateFormat: "M dd yy"
        });

        $("body").on("click", ".addNewKeyword", function () {
            var $keywordList = $(this).siblings(".keywordValues");
            var keywordIndex = $(this).siblings("input['hidden']").val();
            var prefix = "Questions[" + keywordIndex + "].";
            viewModel.addNewKeyword($keywordList, prefix);
            return false;
        });

        $("body").on("click", ".addNewReference", function () {
            var $referenceList = $(this).siblings(".referenceValues");
            var referenceIndex = $(this).siblings("input['hidden']").val();
            var prefix = "Questions[" + referenceIndex + "].";
            viewModel.addNewReference($referenceList, prefix);
            return false;
        });
    </script>
}
